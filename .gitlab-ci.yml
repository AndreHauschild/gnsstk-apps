#.yml file for Gitlab-CI support

# Note that the following tokens must be supplied via the Gitlab Repository Settings:
# - CI_USER: username to pull from gitlab repository in sgl-tks group
# - CI_TOKEN: password to pull from gitlab repository in sgl-tks group
# - PACKAGE_CONFIG_1/2 to pull from project settings cicd variables
# - PACKAGE_CONFIG_CONDA_1/2 to pull from project settings cicd variables
# - DOCKER_REGISTRY to pull from project settings cicd variables

include:
  - project: sgl-tks/ci-control
    file: /gnsstk-apps/ci_downstrm_chain.yml
    ref: main

stages:
  - check
  - build
  - test
  - install
  - package
  - deploy
  - downstream_stack

variables:
  # Default cmake arguments
  CMAKE_ARG_DEFAULT: "-DBUILD_EXT=ON -DTEST_SWITCH=ON ../"
  # this can be used for incremental builds
  # GIT_CLEAN_FLAGS: none
  # This can be set to True by Gitlab UI to only build/test packages.
  RELEASE_ONLY: "False"
  # If set to "True" then only only chained jobs from upstream pipelines are executed.
  GNSSTK_COMMIT:
    value: "main"
    description: "Upstream gnsstk lib branch to link. Defaults to main"
  # The default project id for gnsstk to download windows install artifact
  GNSSTK_PROJID: "164"

# Template for all normal jobs.
.normal_job:
  only:
    variables:
      - $RELEASE_ONLY != "True"

# Template for all "big" builds.
.big_build:
  only:
    refs:
      - main
      - /^ci_.*$/
      - /^version_.*_prep$/
    variables:
      - $RELEASE_ONLY != "True"

# Template for all builds that should produce packages.
.package_build:
  only:
    refs:
      - main
      - /^ci_.*$/
      - /^version_.*_prep$/
      - tags
      - /^tag_.*$/

# Check Stage
# Runs static analysis on code.
static_analysis:
  stage: check
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - ./lint_test.sh
  # Allow failures here to prevent blocking the rest of the pipeline.
  allow_failure: true

# sgl_lint will verify that source files have proper copyright.
sgllint_lint:
  stage: check
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_conda_py27:latest
  script:
    - '######'
    - '# This job checks all files for required lines like copyright/license statements.'
    - '######'
    - conda activate py27
    # Obtain the latest version of ./sgl_lint.py
    - git clone --depth 1 https://${CI_USER}:${CI_TOKEN}@${REPO_HOST}/sgl/repo_utils.git
    - python repo_utils/sgl_lint.py -v -R core
    - python repo_utils/sgl_lint.py -v -R ext
    - python repo_utils/sgl_lint.py -v -R swig/apps
    - python repo_utils/sgl_lint.py -v -R swig/gnsstk
  dependencies: []

protected_term_lint:
  stage: check
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36:latest
  script:
    - '######'
    - '# This job checks all files for protected terms in files modified since the branch split from default.'
    - '######'
    - conda activate py36
    - git clone --depth 1 https://${CI_USER}:${CI_TOKEN}@${REPO_HOST}/sgl/repo_utils.git
    # We pull the default branch because the CI doesn't normally have any branches other than the one being tested.
    - echo "git fetch -uf origin ${CI_DEFAULT_BRANCH}:${CI_DEFAULT_BRANCH}"
    - git fetch -uf origin ${CI_DEFAULT_BRANCH}:${CI_DEFAULT_BRANCH}
    - echo "bash repo_utils/dw_search/modified_file_check.sh ${CI_DEFAULT_BRANCH} $CI_COMMIT_SHA"
    - bash repo_utils/dw_search/modified_file_check.sh ${CI_DEFAULT_BRANCH} $CI_COMMIT_SHA
  dependencies: []
  # This has the occasional false-positive, so it's advisory only.
  allow_failure: true

protected_history_lint:
  stage: check
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36:latest
  script:
    - '######'
    - '# This job checks all files modified on this branch for sensitive terms.'
    - '######'
    - conda activate py36
    - git clone --depth 1 https://${CI_USER}:${CI_TOKEN}@${REPO_HOST}/sgl/repo_utils.git
    # We pull the default branch because the CI doesn't normally have any branches other than the one being tested.
    - echo "git fetch -uf origin ${CI_DEFAULT_BRANCH}:${CI_DEFAULT_BRANCH}"
    - git fetch -uf origin ${CI_DEFAULT_BRANCH}:${CI_DEFAULT_BRANCH}
    - echo "bash repo_utils/dw_search/history_check.sh ${CI_DEFAULT_BRANCH} $CI_COMMIT_SHA"
    - bash repo_utils/dw_search/history_check.sh ${CI_DEFAULT_BRANCH} $CI_COMMIT_SHA
  dependencies: []
  # This has the occasional false-positive, so it's advisory only.
  allow_failure: true

# Runs the documentation generation
generate_documentation:
  stage: check
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    # Install GraphViz
    - sudo apt-get install -y graphviz
    # Call doxygen w/alternate target directory
    - doxygen
  # Allow failures here to prevent blocking the rest of the pipeline.
  allow_failure: true
  artifacts:
    paths:
      - docs/

# Validates some internal repository structure.
repository_validation:
  stage: check
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    # Verify there are no duplicate header files names in the repo.
    - ./dup_check.sh
  # Allow failures here to prevent blocking the rest of the pipeline.
  allow_failure: false

#
# Build Stage - Try building in several environments.
#

deb8_build:
  stage: build
  needs: []
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian8_fai_ish
  script:
    # Install dependencies from latest CI first. latest deb CI artifacts first.
    - bash debian/install_required_deps_debian.sh package_debian_8 pkg_min
    - mkdir -p build
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DCMAKE_INSTALL_PREFIX=$gnsstk -DCMAKE_PREFIX_PATH=/usr -DBUILD_EXT=ON -DTEST_SWITCH=ON ../
    - make all -j 4
  artifacts:
    paths:
      - build/

deb9_build:
  stage: build
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    # Install dependencies from latest CI first.
    - bash debian/install_required_deps_debian.sh package_debian_9 pkg_min
    - mkdir -p build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
    - build/

deb10_build:
  stage: build
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    # Install dependencies from latest CI first.
    - bash debian/install_required_deps_debian.sh package_debian_10 pkg_min
    - mkdir -p build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

deb10_op1_build:
  stage: build
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    # Install dependencies from latest CI first.
    - bash debian/install_required_deps_debian.sh package_debian_10 pkg_max
    # Link optional library sgltk
    - ./optional_package_add.sh $PACKAGE_CONFIG_1
    - mkdir -p build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

deb10_op2_build:
  stage: build
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    # Install dependencies from latest CI first.
    - bash debian/install_required_deps_debian.sh package_debian_10 pkg_max
    # Link optional libraries sgltk, betatk, mdhtk
    - ./optional_package_add.sh $PACKAGE_CONFIG_2
    - mkdir -p build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

conda_py27_build:
  stage: build
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py27
  script:
    # Install dependencies from latest CI first.
    - bash conda_recipe/get_required_deps_conda.sh package_conda pkg_min
    - conda activate conda_builder
    - conda index conda-bld
    - conda activate py27
    - conda install gnsstk --override-channels -c file://$PWD/conda-bld/
    - mkdir -p build
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gnsstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

conda_py36_build:
  stage: build
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36
  script:
    # Install dependencies from latest CI first.
    - bash conda_recipe/get_required_deps_conda.sh package_conda pkg_min
    - conda activate conda_builder
    - conda index conda-bld
    - conda activate py36
    - conda install gnsstk --override-channels -c file://$PWD/conda-bld/
    - mkdir -p build
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gnsstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

conda_op2_py27_build:
  stage: build
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py27
  script:
    # Install dependencies from latest CI first.
    - bash conda_recipe/get_required_deps_conda.sh package_conda pkg_max
    - conda activate conda_builder
    - conda index conda-bld
    - conda activate py27
    # Install optional conda libraries sgltk, betatk, mdhtk_cpp
    - conda install gnsstk $PACKAGE_CONFIG_CONDA_2 --override-channels -c file://$PWD/conda-bld/
    # Link optional libraries sgltk, betatk, mdhtk
    - ./optional_package_add.sh $PACKAGE_CONFIG_2
    - mkdir -p build
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gnsstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

rhel7_build:
  stage: build
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    # Install dependencies from latest CI first.
    - bash rpm_files/install_required_deps_rpm.sh package_redhat pkg_min
    - mkdir -p build
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DCMAKE_INSTALL_PREFIX=install -DBUILD_EXT=ON -DTEST_SWITCH=ON ../
    - make all -j 4
  artifacts:
    paths:
    - build/

rhel8_build:
  stage: build
  needs: []
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    # Install dependencies from latest CI first.
    - bash rpm_files/install_required_deps_rpm.sh package_redhat_8 pkg_min
    - mkdir -p build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

windows_build:
  stage: build
  needs: []
  extends: .normal_job
  tags:
    - win10
  script:
    - SET PATH=%PATH%;c:\Program Files\7-Zip
    - 'echo curl --output gnsstk_win.zip --header "PRIVATE-TOKEN: %CI_API_TOKEN%" https://%REPO_HOST%/api/v4/projects/%GNSSTK_PROJID%/jobs/artifacts/%GNSSTK_COMMIT%/download?job=user_install_windows'
    - 'curl --output gnsstk_win.zip --header "PRIVATE-TOKEN: %CI_API_TOKEN%" https://%REPO_HOST%/api/v4/projects/%GNSSTK_PROJID%/jobs/artifacts/%GNSSTK_COMMIT%/download?job=user_install_windows'
    - 7z x -olibrary gnsstk_win.zip
    - SET GNSSTK_DIR=%CI_PROJECT_DIR%\library\build\install\share\cmake\GNSSTK
# incremental builds
#    - if not exist "%CI_PROJECT_DIR%/build/" mkdir "%CI_PROJECT_DIR%/build"
# non-incremental builds
    - mkdir build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=install -DBUILD_EXT=ON -DTEST_SWITCH=ON -G "Visual Studio 14 2015 Win64" ../
    - cmake --build . --config Release
  artifacts:
    paths:
    - build/
# used for incremental builds
#  cache:
#    paths:
#    - build/
  timeout: 30m


# Test Stage
# Runs all tests of GNSSTK for each platform
deb8_test:
  stage: test
  needs: [deb8_build]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian8_fai_ish
  script:
    - bash debian/install_required_deps_debian.sh package_debian_8 pkg_min
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - deb8_build

deb9_test:
  stage: test
  needs: [deb9_build]
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - bash debian/install_required_deps_debian.sh package_debian_9 pkg_min
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - deb9_build

deb10_test:
  stage: test
  needs: [deb10_build]
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - bash debian/install_required_deps_debian.sh package_debian_10 pkg_min
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - deb10_build

deb10_op2_test:
  stage: test
  needs: [deb10_op2_build]
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - bash debian/install_required_deps_debian.sh package_debian_10 pkg_max
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
      - build/Testing/Temporary/
  dependencies:
    - deb10_op2_build

rhel7_test:
  stage: test
  needs: [rhel7_build]
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat pkg_min
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - rhel7_build

rhel8_test:
  stage: test
  needs: [rhel8_build]
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat_8 pkg_min
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
      - build/Testing/Temporary/
  dependencies:
    - rhel8_build

windows_test:
  stage: test
  needs: [windows_build]
  extends: .normal_job
  tags:
    - win10
  script:
    - SET PATH=%PATH%;c:\Program Files\7-Zip
    - 'curl --output gnsstk_win.zip --header "PRIVATE-TOKEN: %CI_API_TOKEN%" https://%REPO_HOST%/api/v4/projects/%GNSSTK_PROJID%/jobs/artifacts/%GNSSTK_COMMIT%/download?job=user_install_windows'
    - 7z x -olibrary gnsstk_win.zip
    - SET GNSSTK_DIR=%CI_PROJECT_DIR%\library\build\install\share\cmake\GNSSTK
    - cd build
    - cmake --build . --target RUN_TESTS --config Release
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - windows_build
  timeout: 5m

# User_Install Stage
# Tests user install of GNSSTk on each platform, saves artifacts for
# downstream builds.
deb9_user_install:
  stage: install
  needs: [deb9_build]
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - bash debian/install_required_deps_debian.sh package_debian_9 pkg_min
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DCMAKE_INSTALL_PREFIX=$gnsstk ../
    - make install -j 4
  artifacts:
    paths:
      - build/install
  dependencies:
    - deb9_build

rhel7_user_install:
  stage: install
  needs: [rhel7_build]
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat pkg_min
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DCMAKE_INSTALL_PREFIX=$gnsstk ../
    - make install -j 4
  artifacts:
    paths:
      - build/install
  dependencies:
    - rhel7_build

rhel8_user_install:
  stage: install
  needs: [rhel8_build]
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat_8 pkg_min
    - cd build
    - export gnsstk=`pwd`/install
    - cmake -DCMAKE_INSTALL_PREFIX=$gnsstk ../
    - make install -j 4
  artifacts:
    paths:
      - build/install
  dependencies:
    - rhel8_build

user_install_windows:
  stage: install
  needs: [windows_build]
  extends: .normal_job
  tags:
    - win10
  script:
    - SET PATH=%PATH%;c:\Program Files\7-Zip
    - 'curl --output gnsstk_win.zip --header "PRIVATE-TOKEN: %CI_API_TOKEN%" https://%REPO_HOST%/api/v4/projects/%GNSSTK_PROJID%/jobs/artifacts/%GNSSTK_COMMIT%/download?job=user_install_windows'
    - 7z x -olibrary gnsstk_win.zip
    - SET GNSSTK_DIR=%CI_PROJECT_DIR%\library\build\install\share\cmake\GNSSTK
    - cd build
    - cmake --build . --config Release --target install
  dependencies:
    - windows_build
# Temporarily allow failures as Windows Runner issues are resolved
  timeout: 10m

# System Stage
# Tests install of GNSSTk on each platform, saves artifacts for downstream builds.
deb9_system_install:
  stage: install
  needs: [deb9_build]
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - bash debian/install_required_deps_debian.sh package_debian_9 pkg_min
    - cd build
    - export gnsstk=/usr/local
    - cmake -DCMAKE_INSTALL_PREFIX=$gnsstk ../
    - sudo make install -j 4
  dependencies:
    - deb9_build

rhel7_system_install:
  stage: install
  needs: [rhel7_build]
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat pkg_min
    - cd build
    - export gnsstk=/usr/local
    - cmake -DCMAKE_INSTALL_PREFIX=$gnsstk ../
    - sudo make install -j 4
  dependencies:
    - rhel7_build

rhel8_system_install:
  stage: install
  needs: [rhel8_build]
  extends: .normal_job
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat_8 pkg_min
    - cd build
    - export gnsstk=/usr/local
    - cmake -DCMAKE_INSTALL_PREFIX=$gnsstk ../
    - sudo make install -j 4
  dependencies:
    - rhel8_build


# Package Stage
# Tests packaging of GNSSTk-apps on all platforms
# Temporarily changing name back to old name so repo_utils can find this job.
# We will standardize job names per Jira SIM-55
package_debian_8:
  stage: package
  needs: []
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian8_fai_ish
  script:
    # Install dependencies from latest CI first.
    - bash debian/install_required_deps_debian.sh package_debian_8 pkg_min
    # Remove any directories left over from the above script.
    - rm -rf packages repo_utils
    # Mark the debian log so that this package is a backport.
    # Use the most recent Maintainer as current maintainer.
    - export DEBEMAIL=$(dpkg-parsechangelog -S Maintainer)
    - dch --bpo "No Changes"
    - dpkg-buildpackage -us -uc -d --changes-option="-DDistribution=jessie-sgl"
    - mkdir debs
    - mv ../*.deb debs
    - mv ../*.changes debs
    - mv ../*.dsc debs
    - mv ../*.git debs
  artifacts:
    when: always
    paths:
        - debs/
        - debian/
  dependencies:
    - deb8_build

package_debian_9:
  stage: package
  needs: []
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    # Install dependencies from latest CI first.
    - bash debian/install_required_deps_debian.sh package_debian_9 pkg_min
    # Remove any directories left over from the above script.
    - rm -rf packages repo_utils
    - dpkg-buildpackage -us -uc -d --changes-option="-DDistribution=stretch-sgl"
    - mkdir debs
    - mv ../*.deb debs
    - mv ../*.changes debs
    - mv ../*.dsc debs
    - mv ../*.git debs
    - mv ../*.buildinfo debs
  artifacts:
    paths:
      - debs/
  dependencies:
    - deb9_build

#Temporarily changing name back to old name so repo_utils can find this job.  We will standardize job names per Jira SIM-55
package_debian_10:
  stage: package
  needs: []
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    # Install dependencies from latest CI first.
    - bash debian/install_required_deps_debian.sh package_debian_10 pkg_min
    # Remove any directories left over from the above script.
    - rm -rf packages repo_utils
    # Mark the debian log so that this package is a backport.
    # Use the most recent Maintainer as current maintainer.
    - export DEBEMAIL=$(dpkg-parsechangelog -S Maintainer)
    - dch --bpo "No Changes"
    - dpkg-buildpackage -us -uc -d --changes-option="-DDistribution=buster-sgl"
    - mkdir debs
    - mv ../*.deb debs
    - mv ../*.changes debs
    - mv ../*.dsc debs
    - mv ../*.git debs
    - mv ../*.buildinfo debs
  artifacts:
    paths:
      - debs/
  dependencies:
    - deb10_build

package_conda:
  stage: package
  needs: []
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36
  script:
    - bash conda_recipe/get_required_deps_conda.sh package_conda pkg_min
    - mv conda-bld conda-bld2
    - conda activate conda_builder
    - export GIT_COMMIT=$CI_COMMIT_REF_NAME
    - conda index conda-bld2
    - conda-build conda_recipe --override-channels -c file://$PWD/conda-bld2/
    # Copy files to local directory for archiving.
    - mkdir -p conda-bld
    - cp -r $CONDA_PREFIX/conda-bld/* conda-bld/
    # Don't archive the cache files.
    - rm -r conda-bld/linux-64/.cache
  artifacts:
    paths:
      - conda-bld/linux-64/
  dependencies: []

package_redhat:
  stage: package
  needs: []
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat pkg_min
    - bash rpm_files/setup_dirs.sh
    - git archive --prefix gnsstk-apps-master/ -o rpm_files/SOURCES/gnsstk-apps-master.tar.gz HEAD
    - pushd rpm_files
    - rpmbuild --define "_topdir ${PWD}" --define "debug_package %{nil}" -ba SPECS/gnsstk-apps.spec
  artifacts:
    paths:
      - rpm_files/RPMS/x86_64/gnsstk-*
      - rpm_files/SRPMS/gnsstk-*
  dependencies: []

package_redhat_8:
  stage: package
  needs: []
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat_8 pkg_min
    - bash rpm_files/setup_dirs.sh
    - git archive --prefix gnsstk-apps-master/ -o rpm_files/SOURCES/gnsstk-apps-master.tar.gz HEAD
    - pushd rpm_files
    - rpmbuild --define "_topdir ${PWD}" --define "debug_package %{nil}" --define "_build_id_links none" -ba SPECS/gnsstk-apps.spec
  artifacts:
    when: always
    paths:
      - rpm_files/
  dependencies: []

#      - rpm_files/RPMS/x86_64/gnsstk-*
#      - rpm_files/SRPMS/gnsstk-*

# Deploy Stage
# Tests install of GNSSTk package on each platform, saves artifacts for downstream builds.
deb8_deploy:
  stage: deploy
  needs: [package_debian_8]
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian8_fai_ish
  script:
    # Install dependencies from latest CI first.
    - bash debian/install_required_deps_debian.sh package_debian_8 pkg_min
    - cd debs
    - sudo dpkg -i ./*.deb
    - timeconvert
  dependencies:
    - package_debian_8

deb9_deploy:
  stage: deploy
  needs: [package_debian_9]
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    # Install dependencies from latest CI first.
    - bash debian/install_required_deps_debian.sh package_debian_9 pkg_min
    - cd debs
    - sudo apt-get -y install ./*.deb
    - python -c "import gnsstk"
    - timeconvert
  dependencies:
    - package_debian_9

deb10_deploy:
  stage: deploy
  needs: [package_debian_10]
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    # Install dependencies from latest CI first.
    - bash debian/install_required_deps_debian.sh package_debian_10 pkg_min
    - cd debs
    - sudo apt-get -y install ./*.deb
    - python -c "import gnsstk"
    - timeconvert
  dependencies:
    - package_debian_10

rhel7_deploy:
  stage: deploy
  needs: [package_redhat]
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    # Install dependencies from latest CI first.
    - bash rpm_files/install_required_deps_rpm.sh package_redhat pkg_min
    - cd rpm_files/RPMS/x86_64/
    - sudo yum install gnsstk-*.rpm -y
    - timeconvert
  dependencies:
    - package_redhat

rhel8_deploy:
  stage: deploy
  needs: [package_redhat_8]
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    # Install dependencies from latest CI first.
    - bash rpm_files/install_required_deps_rpm.sh package_redhat_8 pkg_min
    - cd rpm_files/RPMS/x86_64/
    - sudo yum install gnsstk-*.rpm -y
    - timeconvert
  dependencies:
    - package_redhat_8

# This requires a third-party package called NSIS.  We don't have it
# installed and don't have the resources to make it work right now.
# windows_package:
#   stage: package
#   tags:
#     - win10
#   script:
#     - cd build
#     - cpack -C Release
#   dependencies:
#     - windows_build

# Temporarily allow failures as Windows Runner issues are resolved
