#.yml file for Gitlab-CI support

# Note that the following tokens must be supplied via the Gitlab Repository Settings:
# - CI_USER: username to pull from gitlab repository in sgl-tks group
# - CI_TOKEN: password to pull from gitlab repository in sgl-tks group
# - CI_USER_SGL: username to pull from gitlab repository in sgl group
# - CI_TOKEN_SGL: password to pull from gitlab repository in sgl group

stages:
  - check
  - build
  - test
  - install
  - package
  - deploy

# Default cmake arguments
variables:
  REPO_HOST: "repositories.arlut.utexas.edu"
  CMAKE_ARG_DEFAULT: "-DBUILD_EXT=ON -DBUILD_PYTHON=ON -DTEST_SWITCH=ON -DPIP_WHEEL_SWITCH=ON ../"
  DOCKER_REGISTRY: "modisdev:5000/sgl_ci"
  # this can be used for incremental builds
  # GIT_CLEAN_FLAGS: none
  # This can be set to True by Gitlab UI to only build/test packages.
  RELEASE_ONLY: "False"
  # When building packages, this determines which branch gpstk/sgltk
  # artifacts are pulled from.
  GPSTK_COMMIT: "ci_issue_475"
  SGLTK_COMMIT: "main"
  BETATK_COMMIT: "main"
  MDHTK_COMMIT: "master"
  PROJ_GPSTK: "2"

# Template for all normal jobs.
.normal_build:
  only:
    variables:
      - $RELEASE_ONLY != "True"

# Template for all "big" builds.
.big_build:
  only:
    refs:
      - main
      - /^ci_.*$/
      - /^version_.*_prep$/
    variables:
      - $RELEASE_ONLY != "True"

# Template for all builds that should produce packages.
.package_build:
  only:
    refs:
      - main
      - /^ci_.*$/
      - /^version_.*_prep$/
      - tags
      - /^tag_.*$/

# Check Stage
# Runs static analysis on code.
static_analysis:
  stage: check
  needs: []
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - ./lint_test.sh
  # Allow failures here to prevent blocking the rest of the pipeline.
  allow_failure: true

# sgl_lint will verify that source files have proper copyright.
sgllint_lint:
  stage: check
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_conda_py27:latest
  script:
    - '######'
    - '# This job checks all files for required lines like copyright/license statements.'
    - '######'
    - conda activate py27
    # Obtain the latest version of ./sgl_lint.py
    - git clone --depth 1 https://${CI_USER_SGL}:${CI_TOKEN_SGL}@${REPO_HOST}/sgl/repo_utils.git
    - python repo_utils/sgl_lint.py -v -R core
    - python repo_utils/sgl_lint.py -v -R ext
    - python repo_utils/sgl_lint.py -v -R swig/apps
    - python repo_utils/sgl_lint.py -v -R swig/gpstk
  dependencies: []

protected_term_lint:
  stage: check
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36:latest
  script:
    - '######'
    - '# This job checks all files for protected terms in files modified since the branch split from default.'
    - '######'
    - conda activate py36
    - git clone --depth 1 https://${CI_USER_SGL}:${CI_TOKEN_SGL}@${REPO_HOST}/sgl/repo_utils.git
    # We pull the default branch because the CI doesn't normally have any branches other than the one being tested.
    - git fetch origin ${CI_DEFAULT_BRANCH}:${CI_DEFAULT_BRANCH}
    - bash repo_utils/dw_search/modified_file_check.sh ${CI_DEFAULT_BRANCH} $CI_COMMIT_SHA
  dependencies: []
  # This has the occasional false-positive, so it's advisory only.
  allow_failure: true

protected_history_lint:
  stage: check
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36:latest
  script:
    - '######'
    - '# This job checks all files modified on this branch for sensitive terms.'
    - '######'
    - conda activate py36
    - git clone --depth 1 https://${CI_USER_SGL}:${CI_TOKEN_SGL}@${REPO_HOST}/sgl/repo_utils.git
    # We pull the default branch because the CI doesn't normally have any branches other than the one being tested.
    - git fetch origin ${CI_DEFAULT_BRANCH}:${CI_DEFAULT_BRANCH}
    - bash repo_utils/dw_search/history_check.sh ${CI_DEFAULT_BRANCH} $CI_COMMIT_SHA
  dependencies: []
  # This has the occasional false-positive, so it's advisory only.
  allow_failure: true

# Runs the documentation generation
generate_documentation:
  stage: check
  needs: []
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    # Install GraphViz
    - sudo apt-get install -y graphviz
    # Call doxygen w/alternate target directory
    - doxygen
  # Allow failures here to prevent blocking the rest of the pipeline.
  allow_failure: true
  artifacts:
    paths:
      - docs/

# Validates some internal repository structure.
repository_validation:
  stage: check
  needs: []
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    # Verify there are no duplicate header files names in the repo.
    - ./dup_check.sh
  # Allow failures here to prevent blocking the rest of the pipeline.
  allow_failure: false


#
# Build Stage - Try building in several environments.
#

deb7_build:
  stage: build
  needs: []
  extends: .big_build
  tags:
    - docker-executor
    # Not all docker runners support debian 7
    - deb7-support
  image: $DOCKER_REGISTRY/debian7_fai_ish
  script:
    - mkdir packages
    - cd packages
    - 'curl --output gpstk_deb.zip --header "PRIVATE-TOKEN: ${CI_API_TOKEN}" https://$REPO_HOST/api/v4/projects/$PROJ_GPSTK/jobs/artifacts/${GPSTK_BRANCH}/download?job=user_install_debian_7'
    - unzip gpstk_deb.zip
    - export GPSTK_DIR=`pwd`/build/install/share/cmake/GPSTK
    - cd ..
    - mkdir -p build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DCMAKE_INSTALL_PREFIX=install -DBUILD_EXT=ON -DTEST_SWITCH=ON ../
    - make all -j 4
  artifacts:
    paths:
      - build/
  allow_failure: true

deb8_build:
  stage: build
  needs: []
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian8_fai_ish
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash debian/install_required_deps_debian.sh package_debian_8 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - export buildroot=`pwd`
    - export LD_LIBRARY_PATH=/usr/local/lib
    - mkdir -p build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_PREFIX_PATH=/usr/local -DBUILD_EXT=ON -DTEST_SWITCH=ON ../
    - make all -j 4
  artifacts:
    paths:
      - build/

deb9_build:
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash debian/install_required_deps_debian.sh package_debian_9 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - export buildroot=`pwd`
    - export LD_LIBRARY_PATH=/usr/local/lib
    - mkdir -p build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
    - build/

deb10_build:
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash debian/install_required_deps_debian.sh package_debian_10 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - export buildroot=`pwd`
    - export LD_LIBRARY_PATH=/usr/local/lib
    - mkdir -p build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

conda_py27_build:
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py27
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash debian/install_required_deps_debian.sh package_debian_9 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - export buildroot=`pwd`
    - export LD_LIBRARY_PATH=/usr/local/lib
    - conda activate py27
    - mkdir -p build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

conda_py36_build:
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash debian/install_required_deps_debian.sh package_debian_9 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - export buildroot=`pwd`
    - export LD_LIBRARY_PATH=/usr/local/lib
    - conda activate py36
    - mkdir -p build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

rhel7_build:
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash rpm_files/install_required_deps_rpm.sh package_redhat $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - export buildroot=`pwd`
    - export LD_LIBRARY_PATH=/usr/local/lib
    - mkdir -p build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DCMAKE_INSTALL_PREFIX=install -DBUILD_EXT=ON -DTEST_SWITCH=ON ../
    - make all -j 4
  artifacts:
    paths:
    - build/

rhel8_build:
  stage: build
  needs: []
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash rpm_files/install_required_deps_rpm.sh package_redhat_8 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - export buildroot=`pwd`
    - export LD_LIBRARY_PATH=/usr/local/lib
    - mkdir -p build
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=install $CMAKE_ARG_DEFAULT
    - make all -j 4
  artifacts:
    paths:
      - build/

windows_build:
  stage: build
  needs: []
  extends: .normal_build
  tags:
    - win10
  script:
    - SET PATH=%PATH%;c:\Program Files\7-Zip
    - curl --output gpstk_win.zip https://%REPO_HOST%/api/v4/projects/%PROJ_GPSTK%/jobs/artifacts/%GPSTK_COMMIT%/download?job=user_install_windows
    - 7z x -olibrary gpstk_win.zip
    - SET GPSTK_DIR=%CI_PROJECT_DIR%\library\build\install\share\cmake\GPSTK
# incremental builds
    - if not exist "%CI_PROJECT_DIR%/build/" mkdir "%CI_PROJECT_DIR%/build"
# non-incremental builds
#    - mkdir build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=install -DBUILD_EXT=ON -DBUILD_PYTHON=OFF -DTEST_SWITCH=ON -G "Visual Studio 14 2015 Win64" ../
    - cmake --build . --config Release
  artifacts:
    paths:
    - build/
# used for incremental builds
  cache:
    paths:
    - build/
  timeout: 30m
# Temporarily allow failures as Windows Runner issues are resolved
  allow_failure: true


# Test Stage
# Runs all tests of GPSTK for each platform
deb7_test:
  stage: test
  needs: [deb7_build]
  extends: .big_build
  tags:
    - docker-executor
    # Not all docker runners support debian 7
    - deb7-support
  image: $DOCKER_REGISTRY/debian7_fai_ish
  script:
    - mkdir packages
    - cd packages
    - 'curl --output gpstk_deb.zip --header "PRIVATE-TOKEN: ${CI_API_TOKEN}" https://$REPO_HOST/api/v4/projects/$PROJ_GPSTK/jobs/artifacts/${GPSTK_BRANCH}/download?job=user_install_debian_7'
    - unzip gpstk_deb.zip
    - export GPSTK_DIR=`pwd`/build/install/share/cmake/GPSTK
    - cd ..
    - bash debian/install_required_deps_debian.sh package_debian_7 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - cd build
    - ctest -j 4
    - touch $CI_PROJECT_DIR/success
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - deb7_build
  # Allowing failure since this is unlikely to be fixed before we deprecate debian-7
  allow_failure: true

deb8_test:
  stage: test
  needs: [deb8_build]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian8_fai_ish
  script:
    - bash debian/install_required_deps_debian.sh package_debian_8 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - deb8_build

deb9_test:
  stage: test
  needs: [deb9_build]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - bash debian/install_required_deps_debian.sh package_debian_9 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
    - build/swig/
  dependencies:
    - deb9_build

deb10_test:
  stage: test
  needs: [deb10_build]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    - bash debian/install_required_deps_debian.sh package_debian_10 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
    - build/swig/
  dependencies:
    - deb10_build

conda_py27_test:
  stage: test
  needs: [conda_py27_build]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py27
  script:
    - bash debian/install_required_deps_debian.sh package_debian_9 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - conda activate py27
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
    - build/swig/
  dependencies:
    - conda_py27_build

conda_py36_test:
  stage: test
  needs: [conda_py36_build]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36
  script:
    - bash debian/install_required_deps_debian.sh package_debian_9 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - conda activate py36
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
    - build/swig/
  dependencies:
    - conda_py36_build

rhel7_test:
  stage: test
  needs: [rhel7_build]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
  dependencies:
    - rhel7_build

rhel8_test:
  stage: test
  needs: [rhel8_build]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat_8 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - cd build
    - ctest -j 4
  artifacts:
    when: on_failure
    paths:
      - build/Testing/Temporary/
  dependencies:
    - rhel8_build

windows_test:
  stage: test
  needs: [windows_build]
  extends: .normal_build
  tags:
    - win10
  script:
    - SET PATH=%PATH%;c:\Program Files\7-Zip
    - curl --output gpstk_win.zip https://%REPO_HOST%/api/v4/projects/%PROJ_GPSTK%/jobs/artifacts/%GPSTK_COMMIT%/download?job=user_install_windows
    - 7z x -olibrary gpstk_win.zip
    - SET GPSTK_DIR=%CI_PROJECT_DIR%\library\build\install\share\cmake\GPSTK
    - cd build
    - cmake --build . --target RUN_TESTS --config Release
  artifacts:
    when: on_failure
    paths:
    - build/Testing/Temporary/
    - build/swig/
  dependencies:
    - windows_build
  allow_failure: true
  timeout: 5m

# User_Install Stage
# Tests user install of GPSTk on each platform, saves artifacts for
# downstream builds.
deb9_user_install:
  stage: install
  needs: [deb9_build]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - bash debian/install_required_deps_debian.sh package_debian_9 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - export LD_LIBRARY_PATH=/usr/local/lib:$mdhtk/lib:$LD_LIBRARY_PATH
    - cd build
    - export gpstk=`pwd`/install
    - export PYTHONPATH=$gpstk/lib/python2.7/site-packages
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=$gpstk ../
    - make install -j 4
    - python -c "import gpstk"
  artifacts:
    paths:
      - build/install
  dependencies:
    - deb9_build

rhel7_user_install:
  stage: install
  needs: [rhel7_build]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - export LD_LIBRARY_PATH=/usr/local/lib:$mdhtk/lib:$LD_LIBRARY_PATH
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DCMAKE_INSTALL_PREFIX=$gpstk ../
    - make install -j 4
  artifacts:
    paths:
      - build/install
  dependencies:
    - rhel7_build

rhel8_user_install:
  stage: install
  needs: [rhel8_build]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat_8 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - export LD_LIBRARY_PATH=/usr/local/lib:$mdhtk/lib:$LD_LIBRARY_PATH
    - cd build
    - export gpstk=`pwd`/install
    - cmake -DCMAKE_INSTALL_PREFIX=$gpstk ../
    - make install -j 4
  artifacts:
    paths:
      - build/install
  dependencies:
    - rhel8_build

user_install_windows:
  stage: install
  needs: [windows_build]
  extends: .normal_build
  tags:
    - win10
  script:
    - SET PATH=%PATH%;c:\Program Files\7-Zip
    - curl --output gpstk_win.zip https://%REPO_HOST%/api/v4/projects/%PROJ_GPSTK%/jobs/artifacts/%GPSTK_COMMIT%/download?job=user_install_windows
    - 7z x -olibrary gpstk_win.zip
    - SET GPSTK_DIR=%CI_PROJECT_DIR%\library\build\install\share\cmake\GPSTK
    - cd build
    - cmake --build . --config Release --target install
  dependencies:
    - windows_build
# Temporarily allow failures as Windows Runner issues are resolved
  allow_failure: true
  timeout: 10m

# System Stage
# Tests install of GPSTk on each platform, saves artifacts for downstream builds.
deb9_system_install:
  stage: install
  needs: [deb9_build]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    - bash debian/install_required_deps_debian.sh package_debian_9 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - export LD_LIBRARY_PATH=/usr/local/lib:$mdhtk/lib:$LD_LIBRARY_PATH
    - cd build
    - export gpstk=/usr/local
    - export PYTHONPATH=$gpstk/lib/python2.7/site-packages
    - cmake -DPYTHON_INSTALL_PREFIX=$gpstk -DCMAKE_INSTALL_PREFIX=$gpstk ../
    - sudo make install -j 4
    - python -c "import gpstk"
  dependencies:
    - deb9_build

rhel7_system_install:
  stage: install
  needs: [rhel7_build]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - export LD_LIBRARY_PATH=/usr/local/lib:$mdhtk/lib:$LD_LIBRARY_PATH
    - cd build
    - export gpstk=/usr/local
    - cmake -DCMAKE_INSTALL_PREFIX=$gpstk ../
    - sudo make install -j 4
  dependencies:
    - rhel7_build

rhel8_system_install:
  stage: install
  needs: [rhel8_build]
  extends: .normal_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat_8 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - export LD_LIBRARY_PATH=/usr/local/lib:$mdhtk/lib:$LD_LIBRARY_PATH
    - cd build
    - export gpstk=/usr/local
    - cmake -DCMAKE_INSTALL_PREFIX=$gpstk ../
    - sudo make install -j 4
  dependencies:
    - rhel8_build


# Package Stage
# Tests packaging of GPSTk on all platforms
deb8_package:
  stage: package
  needs: []
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian8_fai_ish
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash debian/install_required_deps_debian.sh package_debian_8 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - rm -rf ../*.deb
    # Mark the debian log so that this package is a backport.
    # Use the most recent Maintainer as current maintainer.
    - export DEBEMAIL=$(dpkg-parsechangelog -S Maintainer)
    - dch --bpo "No Changes"
    - dpkg-buildpackage -us -uc -d --changes-option="-DDistribution=jessie-sgl"
    - mkdir debs
    - mv ../*.deb debs
    - mv ../*.changes debs
    - mv ../*.dsc debs
    - mv ../*.git debs
  artifacts:
    when: always
    paths:
        - debs/
        - debian/
  dependencies:
    - deb8_build

deb9_package:
  stage: package
  needs: []
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash debian/install_required_deps_debian.sh package_debian_9 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - rm -rf ../*.deb
    - dpkg-buildpackage --build-profiles=pkg_python -us -uc -d --changes-option="-DDistribution=stretch-sgl"
    - mkdir debs
    - mv ../*.deb debs
    - mv ../*.changes debs
    - mv ../*.dsc debs
    - mv ../*.git debs
    - mv ../*.buildinfo debs
  artifacts:
    paths:
      - debs/
  dependencies:
    - deb9_build

deb10_package:
  stage: package
  needs: []
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash debian/install_required_deps_debian.sh package_debian_10 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - rm -rf ../*.deb
    # Mark the debian log so that this package is a backport.
    # Use the most recent Maintainer as current maintainer.
    - export DEBEMAIL=$(dpkg-parsechangelog -S Maintainer)
    - dch --bpo "No Changes"
    - dpkg-buildpackage --build-profiles=pkg_python -us -uc -d --changes-option="-DDistribution=buster-sgl"
    - mkdir debs
    - mv ../*.deb debs
    - mv ../*.changes debs
    - mv ../*.dsc debs
    - mv ../*.git debs
    - mv ../*.buildinfo debs
  artifacts:
    paths:
      - debs/
  dependencies:
    - deb10_build

conda_package:
  stage: package
  needs: []
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/deb9_conda_py36
  script:
    - bash conda_recipe/get_required_deps_conda.sh $GPSTK_COMMIT
    - conda activate conda_builder
    - export GIT_COMMIT=$CI_COMMIT_REF_NAME
    - conda index conda-bld
    - conda-build conda_recipe --override-channels -c file://$PWD/conda-bld/
    # Copy files to local directory for archiving.
    - mkdir -p conda-bld
    - cp -r $CONDA_PREFIX/conda-bld/* conda-bld/
    # Don't archive the cache files.
    - rm -r conda-bld/linux-64/.cache
  artifacts:
    paths:
      - conda-bld/linux-64/
  dependencies: []

rhel7_package:
  stage: package
  needs: []
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - bash rpm_files/setup_dirs.sh
    - git archive --prefix gpstk-apps-master/ -o rpm_files/SOURCES/gpstk-apps-master.tar.gz HEAD
    - pushd rpm_files
    - rpmbuild --define "_topdir ${PWD}" --define "debug_package %{nil}" -ba SPECS/gpstk-apps.spec
  artifacts:
    paths:
      - rpm_files/RPMS/x86_64/gpstk-*
      - rpm_files/SRPMS/gpstk-*
  dependencies: []

rhel8_package:
  stage: package
  needs: []
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    - bash rpm_files/install_required_deps_rpm.sh package_redhat_8 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - bash rpm_files/setup_dirs.sh
    - git archive --prefix gpstk-apps-master/ -o rpm_files/SOURCES/gpstk-apps-master.tar.gz HEAD
    - pushd rpm_files
    - rpmbuild --define "_topdir ${PWD}" --define "debug_package %{nil}" --define "_build_id_links none" -ba SPECS/gpstk-apps.spec
  artifacts:
    when: always
    paths:
      - rpm_files/
  dependencies: []

#      - rpm_files/RPMS/x86_64/gpstk-*
#      - rpm_files/SRPMS/gpstk-*

# Deploy Stage
# Tests install of GPSTk package on each platform, saves artifacts for downstream builds.
deb8_deploy:
  stage: deploy
  needs: [deb8_package]
  extends: .package_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian8_fai_ish
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash debian/install_required_deps_debian.sh package_debian_8 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - cd debs
    - sudo dpkg -i ./*.deb
    - timeconvert
  dependencies:
    - deb8_package

deb9_deploy:
  stage: deploy
  needs: [deb9_package]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian9_fai_ish
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash debian/install_required_deps_debian.sh package_debian_9 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - cd debs
    - sudo apt-get -y install ./*.deb
    - python -c "import gpstk"
    - timeconvert
  dependencies:
    - deb9_package

deb10_deploy:
  stage: deploy
  needs: [deb10_package]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/debian10_fai_ish
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash debian/install_required_deps_debian.sh package_debian_10 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - cd debs
    - sudo apt-get -y install ./*.deb
    - python -c "import gpstk"
    - timeconvert
  dependencies:
    - deb10_package

rhel7_deploy:
  stage: deploy
  needs: [rhel7_package]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos7_sgl
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash rpm_files/install_required_deps_rpm.sh package_redhat $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - cd rpm_files/RPMS/x86_64/
    - sudo yum install gpstk-*.rpm -y
    - timeconvert
  dependencies:
    - rhel7_package

rhel8_deploy:
  stage: deploy
  needs: [rhel8_package]
  extends: .big_build
  tags:
    - docker-executor
  image: $DOCKER_REGISTRY/centos8_sgl
  script:
    # Install gpstk/sgltk/betatk from latest deb CI artifacts first.
    - bash rpm_files/install_required_deps_rpm.sh package_redhat_8 $GPSTK_COMMIT $SGLTK_COMMIT $BETATK_COMMIT $MDHTK_COMMIT
    - cd rpm_files/RPMS/x86_64/
    - sudo yum install gpstk-*.rpm -y
    - timeconvert
  dependencies:
    - rhel8_package

# This requires a third-party package called NSIS.  We don't have it
# installed and don't have the resources to make it work right now.
# windows_package:
#   stage: package
#   tags:
#     - win10
#   script:
#     - cd build
#     - cpack -C Release
#   dependencies:
#     - windows_build

# Temporarily allow failures as Windows Runner issues are resolved
